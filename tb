#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
Dieses Programm erstellt fuer den aktuellen Tag -- oder einen anderen -- eine Tagesdatei fuer Notizen.

Bei Erstellung einer Datei fuer heute oder in der Zukunft wird bis zu 4 Tage zurueck nach einem Todomarker "# Todo" gesucht, um moegliche Todos in die neue Datei zu uebernehmen.

Der normale Aufruf ist: tb
Dies erstellt eine Datei fuer heute, ausser sie existiert bereits.

Aufruf fuer Tage in der Vergangenheit oder Zukunft: tb +3  (Aufruf freitags fuer Montag)
Oder auch mit negativen Zahlen.

(C) 2021 by Tjabo Vierbuecher

Todo: show help on request
"""
import os
import os.path
import time
from datetime import date
import sys
import subprocess
import configparser
import locale
locale.setlocale( locale.LC_TIME, '' )
# todo: tb -n
REVISION = "20230525"

configFile = os.path.expanduser( '~/.tagebuchrc' )
if not os.path.exists( configFile ):
    print("Generiere eine Default-Config in", configFile)
    f = open(configFile, 'w')
    f.write("[Tagebuch]\nbasedir: ~/Tagebuch\neditor: vim\ntodomarker: # Todo\n")
    f.close()

config = configparser.RawConfigParser()
config.read( configFile )
tbpath = os.path.expanduser( config.get('Tagebuch', 'basedir') )
editor = config.get('Tagebuch', 'editor')
# Der todomarker is tnun fest '# Todo'... todomarker = config.get('Tagebuch', 'todomarker')

daysAdd = 0

if len(sys.argv) > 1:
    daysAdd = int( sys.argv[1] )

now = time.time()
now = now + (86000 * daysAdd)
nowDate = date.fromtimestamp( now )
todo = '';

def makeFilename(dir, mydate):
    return os.path.join( dir, mydate.strftime("%Y-%m-%d-%a.md") )

# ensure the year directory exists:
currentDir = os.path.join( tbpath, nowDate.strftime("%Y") )
if not os.path.exists( currentDir ):
    os.makedirs( currentDir )

currentFile = makeFilename( currentDir, nowDate )

if os.path.isfile( currentFile ):
    print("Datei existiert schon: %s" % (currentFile, ))
else:
    got_todo = False
    if daysAdd >= 0:  # nur wenn nicht in der Vergangenheit gespielt wird:
        for days in (1,2,3,4):    # zurueck in der zeit nach einem file suchen, und von dem den todo-block uebernehmen:
            pastDate = date.fromtimestamp(now - (86400*days))
            pastFile = makeFilename( currentDir, pastDate )
            # print "Checking pastFile", pastFile
            if os.path.isfile( pastFile ):
                f = open(pastFile, 'r')         # Lese optionalen Todo-Block aus, zum uebernehmn in die neue Datei:
                data = f.read()
                f.close()
                is_in_todo_block = False
                for line in data.split("\n"):
                    if line[0:6] == "# Todo":
                        is_in_todo_block = True
                        got_todo = True
                    elif line[0:2] == "# ":
                        is_in_todo_block = False
                    if is_in_todo_block:
                        todo = todo + line + "\n"
                if got_todo:
                    break

    # Erzeuge neue Tagesdatei:
    f = open(currentFile, 'w')
    headline = nowDate.strftime("%d.%m.%Y (%A)")
    f.write( "# " + headline + "\n\n" )
    # f.write( ("=" * len( headline )) + "\n\n" ) 
    for i in range(7):
        f.write( "* ( ) \n" )
    if len(todo):
        f.write( "\n" + todo )
    # f.write("\n# Todo\n")

    f.write("\n# Redmine-Tickets\n\n")
    p = subprocess.Popen("/home/t3o/me/tools/redmine/my-tickets.pl --prefix '* '", stdout=subprocess.PIPE, shell=True)
    (output, err) = p.communicate()
    p_status = p.wait()

    f.write( output.decode('iso-8859-15') )
    f.close()
    print("Neue Datei: %s" % (currentFile, ))

# print "Starte Editor fuer Datei", currentFile
subprocess.call( [editor, currentFile] )
print(currentFile)

